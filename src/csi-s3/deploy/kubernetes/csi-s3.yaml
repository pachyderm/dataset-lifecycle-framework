apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-s3
  namespace: ${DATASET_OPERATOR_NAMESPACE}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-s3
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update","create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-s3
subjects:
  - kind: ServiceAccount
    name: csi-s3
    namespace: ${DATASET_OPERATOR_NAMESPACE}
roleRef:
  kind: ClusterRole
  name: csi-s3
  apiGroup: rbac.authorization.k8s.io
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-s3
  namespace: ${DATASET_OPERATOR_NAMESPACE}
spec:
  selector:
    matchLabels:
      app: csi-s3
  template:
    metadata:
      labels:
        app: csi-s3
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccount: csi-s3
      hostNetwork: true
      containers:
        - name: driver-registrar
          image: ${NODE_DRIVER_REGISTRAR_IMAGE}
          imagePullPolicy: Always
          args:
            - --v=5
            - --csi-address=/csi/csi.sock
            - --kubelet-registration-path=${KUBELET_PATH}/plugins/csi-s3/csi.sock
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: /registration
              name: registration-dir
            - mountPath: /csi-data-dir
              name: csi-data-dir
        - name: csi-s3
          image: ${CSI_S3_IMAGE}
          imagePullPolicy: Always
          args:
            - "--v=5"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--nodeid=$(KUBE_NODE_NAME)"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: cheap
              value: "off"
          securityContext:
            privileged: true
#          ports:
#            - containerPort: 9898
#              name: healthz
#              protocol: TCP
#          TODO make it configurable and build it for ppc64le
#          livenessProbe:
#            failureThreshold: 5
#            httpGet:
#              path: /healthz
#              port: healthz
#            initialDelaySeconds: 10
#            timeoutSeconds: 3
#            periodSeconds: 2
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: ${KUBELET_PATH}/pods
              mountPropagation: Bidirectional
              name: mountpoint-dir
            - mountPath: ${KUBELET_PATH}/plugins
              mountPropagation: Bidirectional
              name: plugins-dir
            - mountPath: /csi-data-dir
              name: csi-data-dir
            - mountPath: /dev
              name: dev-dir
          ##TODO make it configurable and build it for ppc64le
#        - name: liveness-probe
#          volumeMounts:
#            - mountPath: /csi
#              name: socket-dir
#          image: quay.io/k8scsi/livenessprobe:v1.1.0
#          args:
#            - --csi-address=/csi/csi.sock
#            - --health-port=9898
      volumes:
        - hostPath:
            path: ${KUBELET_PATH}/plugins/csi-s3
            type: DirectoryOrCreate
          name: socket-dir
        - hostPath:
            path: ${KUBELET_PATH}/pods
            type: DirectoryOrCreate
          name: mountpoint-dir
        - hostPath:
            path: ${KUBELET_PATH}/plugins_registry
            type: Directory
          name: registration-dir
        - hostPath:
            path: ${KUBELET_PATH}/plugins
            type: Directory
          name: plugins-dir
        - hostPath:
            # 'path' is where PV data is persisted on host.
            # using /tmp is also possible while the PVs will not available after plugin container recreation or host reboot
            path: /var/lib/csi-s3/
            type: DirectoryOrCreate
          name: csi-data-dir
        - hostPath:
            path: /dev
            type: Directory
          name: dev-dir
